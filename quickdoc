#!/usr/bin/env python3

import argparse
import os
import subprocess
from pdf2docx import Converter as PDF2DOCXConverter
from docx2pdf import convert as DOCX2PDFConverter

def find_file(filename):
    try:
        for root, dirs, files in os.walk(os.getcwd()):  
            if filename in files:
                return os.path.join(root, filename)
        return None
    except Exception as e:
        print(f"Error finding file '{filename}': {e}")
        return None

def ppt_pdf(input_file, output_file):
    found_file = find_file(input_file)
    if found_file:
        try:
            subprocess.run(['libreoffice', '--headless', '--convert-to', 'pdf', found_file], check=True)
            pdf_file = found_file.replace('.pptx', '.pdf')
            
            output_path = os.path.join(os.getcwd(), output_file)  
            if os.path.exists(pdf_file):
                os.rename(pdf_file, output_path)
                print(f"Converted {found_file} to {output_path}")
            else:
                print(f"Conversion successful, but output file not found: {pdf_file}")
        except subprocess.CalledProcessError as e:
            print(f"Error converting {found_file} to PDF: {e}")
    else:
        print(f"No file found matching '{input_file}'")

def pdf_docx(input_file, output_file):
    found_file = find_file(input_file)
    if found_file:
        try:
            converter = PDF2DOCXConverter(found_file)
            output_path = os.path.join(os.getcwd(), output_file)  
            converter.convert(output_path)
            print(f"Converted {found_file} to {output_path}")
        except Exception as e:
            print(f"Error converting {found_file} to DOCX: {e}")
    else:
        print(f"No file found matching '{input_file}'")

def docx_pdf(input_file, output_file):
    found_file = find_file(input_file)
    if found_file:
        try:
            
            subprocess.run(['libreoffice', '--headless', '--convert-to', 'pdf', found_file], check=True)
            pdf_file = found_file.replace('.docx', '.pdf')
            
            
            output_path = os.path.join(os.getcwd(), output_file)  
            if os.path.exists(pdf_file):
                os.rename(pdf_file, output_path)
                print(f"Converted {found_file} to {output_path}")
            else:
                print(f"Conversion successful, but output file not found: {pdf_file}")
        except subprocess.CalledProcessError as e:
            print(f"Error converting {found_file} to PDF: {e}")
    else:
        print(f"No file found matching '{input_file}'")

def main():
    parser = argparse.ArgumentParser(
        description="QuickDoc CLI Tool",
        usage="quickdoc <conversion_type> --i <input_file> --o <output_file>"
    )
    parser.add_argument('conversion_type', choices=['ppt2pdf', 'pdf2docx', 'docx2pdf'], help='Type of conversion')
    parser.add_argument('--i', required=True, help='Input file name')
    parser.add_argument('--o', required=True, help='Output file name')

    args = parser.parse_args()

    if args.conversion_type == 'ppt2pdf':
        ppt_pdf(args.i, args.o)
    elif args.conversion_type == 'pdf2docx':
        pdf_docx(args.i, args.o)
    elif args.conversion_type == 'docx2pdf':
        docx_pdf(args.i, args.o)

if __name__ == '__main__':
    main()
